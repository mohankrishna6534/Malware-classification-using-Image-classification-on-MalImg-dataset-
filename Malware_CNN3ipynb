{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1hLfV4ku18kljRZoUHTpsOlG8xccI9Brp","authorship_tag":"ABX9TyPpsNjiR9OdkLzDj2ueXlNr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Data input**"],"metadata":{"id":"NkMdEeZPc-Pq"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"DvEbHZ5Sc-Pq","executionInfo":{"status":"ok","timestamp":1680748755735,"user_tz":-330,"elapsed":11103,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}}},"outputs":[],"source":["import tensorflow\n","from keras import backend as k\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout\n","import os,numpy as np,pandas as pd\n","import cv2\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.utils import to_categorical\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from keras.utils.vis_utils import plot_model\n","from tensorflow.keras import Input\n","from sklearn.model_selection import train_test_split\n","from keras.callbacks import EarlyStopping"]},{"cell_type":"code","source":["# path to image dataset\n","path = '/content/drive/MyDrive/Malware/malimg_paper_dataset_imgs'"],"metadata":{"id":"LWwG6Xhkc-Pr","executionInfo":{"status":"ok","timestamp":1680748755737,"user_tz":-330,"elapsed":30,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# collecting images and corresponding family name of different images\n","family_names = []\n","images = []\n","val_family_names = []\n","val_images = []\n","for family in os.listdir(path):\n","    family_path = os.path.join(path,family)\n","    for i,image in zip(range(80),os.listdir(family_path)): \n","       if i>=60:\n","           # since the image dataset is imbalnaced, we are collecting fixed no.of images/family\n","           image_path = os.path.join(family_path,image)\n","           img = cv2.imread(image_path,0)\n","           img = cv2.resize(img,(64,64))\n","           img = img.astype(float)/255.0 \n","           # converting image data from int to float and altering the range for easy and fast computation\n","           val_images.append(img)\n","           val_family_names.append(family)\n","       else:\n","           image_path = os.path.join(family_path,image)\n","           img = cv2.imread(image_path,0)\n","           img = cv2.resize(img,(64,64))\n","           img = img.astype(float)/255.0 \n","           images.append(img)\n","           family_names.append(family)\n"],"metadata":{"id":"1fdCg3ePc-Pr","executionInfo":{"status":"ok","timestamp":1680749066734,"user_tz":-330,"elapsed":311024,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# counting if all 25 families and 2000 images got collected\n","families = []\n","val_families = []\n","for i in family_names:\n","    if i not in families:\n","        families.append(i)\n","for i in val_family_names:\n","    if i not in val_families:\n","        val_families.append(i)\n","\n","# converting categories to integers\n","for i in family_names:\n","    i = families.index(i)\n","for i in val_family_names:\n","    i = val_families.index(i)\n","\n","print(\"Total no.of training images collected: \",len(images))\n","print(\"Total no.of training lables: \",len(family_names))\n","print(\"Total no.of testing images collected: \",len(val_images))\n","print(\"Total no.of testing lables: \",len(val_family_names))\n","print(\"Total no.of families from which images are collected are:\",len(families))"],"metadata":{"executionInfo":{"status":"ok","timestamp":1680749066735,"user_tz":-330,"elapsed":39,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"colab":{"base_uri":"https://localhost:8080/"},"id":"koWT5JKyc-Ps","outputId":"2f6ca9fb-8691-4adb-d2fa-86a08a52808d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Total no.of training images collected:  1500\n","Total no.of training lables:  1500\n","Total no.of testing images collected:  500\n","Total no.of testing lables:  500\n","Total no.of families from which images are collected are: 25\n"]}]},{"cell_type":"code","source":["for i in range(len(families)):\n","    print(families[i])"],"metadata":{"executionInfo":{"status":"ok","timestamp":1680749066736,"user_tz":-330,"elapsed":28,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"colab":{"base_uri":"https://localhost:8080/"},"id":"yna28saCc-Ps","outputId":"08d0c260-684b-421c-9da3-a1851ff5b21b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Swizzor.gen!E\n","Yuner.A\n","Rbot!gen\n","Obfuscator.AD\n","VB.AT\n","Swizzor.gen!I\n","Skintrim.N\n","Wintrim.BX\n","Lolyda.AT\n","Fakerean\n","Instantaccess\n","Dontovo.A\n","Lolyda.AA3\n","Malex.gen!J\n","Lolyda.AA1\n","Lolyda.AA2\n","C2LOP.P\n","Dialplatform.B\n","Autorun.K\n","Agent.FYI\n","Alueron.gen!J\n","C2LOP.gen!g\n","Adialer.C\n","Allaple.A\n","Allaple.L\n"]}]},{"cell_type":"code","source":["for i in range(len(val_families)):\n","    print(val_families[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JKwy21PxgPAm","executionInfo":{"status":"ok","timestamp":1680749066737,"user_tz":-330,"elapsed":23,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"162311c6-95a9-4d44-8493-8ab194961d39"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Swizzor.gen!E\n","Yuner.A\n","Rbot!gen\n","Obfuscator.AD\n","VB.AT\n","Swizzor.gen!I\n","Skintrim.N\n","Wintrim.BX\n","Lolyda.AT\n","Fakerean\n","Instantaccess\n","Dontovo.A\n","Lolyda.AA3\n","Malex.gen!J\n","Lolyda.AA1\n","Lolyda.AA2\n","C2LOP.P\n","Dialplatform.B\n","Autorun.K\n","Agent.FYI\n","Alueron.gen!J\n","C2LOP.gen!g\n","Adialer.C\n","Allaple.A\n","Allaple.L\n"]}]},{"cell_type":"code","source":["# converting images list to numpy array for easy and fast computation\n","images = np.array(images)\n","val_images = np.array(val_images)\n","# one-hot encoding family names\n","family_names_encoded = pd.Series(family_names)\n","family_names_encoded = pd.get_dummies(family_names_encoded)\n","\n","family_names = family_names_encoded.to_numpy()\n","print(family_names[0])\n","\n","val_family_names_encoded = pd.Series(val_family_names)\n","val_family_names_encoded = pd.get_dummies(val_family_names_encoded)\n","\n","val_family_names = val_family_names_encoded.to_numpy()\n","print(val_family_names[0])"],"metadata":{"executionInfo":{"status":"ok","timestamp":1680749066738,"user_tz":-330,"elapsed":19,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"colab":{"base_uri":"https://localhost:8080/"},"id":"Tv36EUKvc-Ps","outputId":"46c72457-70d2-4f31-ac4d-0648cdc46cf7"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n","[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n"]}]},{"cell_type":"code","source":["# Here K is keras backend, image data fromat is of 2 types\n","# one is channel_first, it is in format (channel,height,width)\n","# other is channel_last, it is in format (height,width,channe)\n","# According to format used by keras backend, we are reshapping out data\n","\n","if k.image_data_format() == 'channels_first':\n","    images = images.reshape(images.shape[0], 1, images[0].shape[0], images[0].shape[1])\n","    inputshape = (1, images[0].shape[0], images[0].shape[0])\n","    val_images = val_images.reshape(val_images.shape[0], 1, val_images[0].shape[0], val_images[0].shape[1])\n","    inputshape = (1, val_images[0].shape[0], val_images[0].shape[0])\n"," \n","else:\n","    images = images.reshape(images.shape[0], images[0].shape[0], images[0].shape[1], 1)\n","    inputshape = (images[0].shape[0], images[0].shape[1], 1)\n","    val_images = val_images.reshape(val_images.shape[0], val_images[0].shape[0], val_images[0].shape[1], 1)\n","    inputshape = (val_images[0].shape[0], val_images[0].shape[1], 1)\n","\n","print(images.shape)\n","print(val_images.shape)"],"metadata":{"id":"WL-ed12UbxJp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749066738,"user_tz":-330,"elapsed":15,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"797b43fe-f488-4048-96bd-0053e3f5b5fc"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["(1500, 64, 64, 1)\n","(500, 64, 64, 1)\n"]}]},{"cell_type":"code","source":["# splitting the dataset for testing and training\n","\n","xtrain,xtest,ytrain,ytest = train_test_split(images,family_names,test_size=0.20,shuffle=True)\n","\n","print(\"Shape of training dataset:\",xtrain.shape)\n","print(\"Shape of testing dataset:\",xtest.shape)\n","print(\"Shape of training lables:\",ytrain.shape)\n","print(\"Shape of testing lables:\",ytest.shape)\n","print(\"Shape of validation dataset:\",val_images.shape)\n","print(\"Shape of validation lables:\",val_family_names.shape)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1680749066739,"user_tz":-330,"elapsed":14,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"colab":{"base_uri":"https://localhost:8080/"},"id":"4oCp9AVDc-Ps","outputId":"51344077-6b8f-4e72-845a-8233495fc630"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of training dataset: (1200, 64, 64, 1)\n","Shape of testing dataset: (300, 64, 64, 1)\n","Shape of training lables: (1200, 25)\n","Shape of testing lables: (300, 25)\n","Shape of validation dataset: (500, 64, 64, 1)\n","Shape of validation lables: (500, 25)\n"]}]},{"cell_type":"markdown","source":["# **Using CNN model**"],"metadata":{"id":"gMmHEjwbZxFC"}},{"cell_type":"code","source":["# using customised CNN model \n","Malware_model = Sequential()\n","Malware_model.add(Conv2D(64, kernel_size=(3, 3),padding='same', activation='relu',input_shape=(64,64,1)))\n","Malware_model.add(MaxPooling2D(pool_size=(2, 2)))\n","Malware_model.add(Conv2D(32, (3, 3), activation='relu'))\n","Malware_model.add(MaxPooling2D(pool_size=(2, 2)))\n","Malware_model.add(Dropout(0.2))\n","Malware_model.add(Conv2D(16, (3, 3), activation='relu'))\n","Malware_model.add(MaxPooling2D(pool_size=(2, 2)))\n","Malware_model.add(Dropout(0.2))\n","Malware_model.add(Flatten())\n","Malware_model.add(Dense(128, activation='relu'))\n","Malware_model.add(Dropout(0.3))\n","Malware_model.add(Dense(50, activation='relu'))\n","Malware_model.add(Dense(25, activation='softmax'))\n","\n","Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n","Malware_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q63qt5Ts3BpK","executionInfo":{"status":"ok","timestamp":1680749067518,"user_tz":-330,"elapsed":789,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"951b009d-e9d7-45c7-8a1c-d51821363724"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 64, 64, 64)        640       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 32, 32, 64)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 30, 30, 32)        18464     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 15, 15, 32)       0         \n"," 2D)                                                             \n","                                                                 \n"," dropout (Dropout)           (None, 15, 15, 32)        0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 13, 13, 16)        4624      \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 6, 6, 16)         0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 6, 6, 16)          0         \n","                                                                 \n"," flatten (Flatten)           (None, 576)               0         \n","                                                                 \n"," dense (Dense)               (None, 128)               73856     \n","                                                                 \n"," dropout_2 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 50)                6450      \n","                                                                 \n"," dense_2 (Dense)             (None, 25)                1275      \n","                                                                 \n","=================================================================\n","Total params: 105,309\n","Trainable params: 105,309\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["#es = EarlyStopping(monitor='val_loss', mode='min', verbose=1)\n","\n","# Fitting the model\n","history = Malware_model.fit(xtrain,ytrain,epochs=50,batch_size=10,validation_data = (xtest,ytest))#, callbacks=[es])\n","\n","# Get training and test loss histories\n","training_loss = history.history['loss']\n","test_loss = history.history['val_loss']\n","\n","# Create count of the number of epochs\n","epoch_count = range(1, len(training_loss) + 1)\n","\n","# Visualize loss history\n","plt.plot(epoch_count, training_loss, 'r--')\n","plt.plot(epoch_count, test_loss, 'b-')\n","plt.legend(['Training Loss', 'Test Loss'])\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.show();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"d8mNiYD_4-mi","executionInfo":{"status":"ok","timestamp":1680749811312,"user_tz":-330,"elapsed":743804,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"81a533a1-8d88-406d-8e16-df473265a626"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","120/120 [==============================] - 16s 116ms/step - loss: 3.2186 - accuracy: 0.0542 - val_loss: 3.1532 - val_accuracy: 0.0767\n","Epoch 2/50\n","120/120 [==============================] - 14s 119ms/step - loss: 2.5489 - accuracy: 0.2325 - val_loss: 2.0270 - val_accuracy: 0.4267\n","Epoch 3/50\n","120/120 [==============================] - 14s 115ms/step - loss: 1.4568 - accuracy: 0.5242 - val_loss: 1.0030 - val_accuracy: 0.6167\n","Epoch 4/50\n","120/120 [==============================] - 14s 113ms/step - loss: 0.9363 - accuracy: 0.6608 - val_loss: 0.7304 - val_accuracy: 0.7267\n","Epoch 5/50\n","120/120 [==============================] - 13s 111ms/step - loss: 0.6992 - accuracy: 0.7442 - val_loss: 0.6430 - val_accuracy: 0.7533\n","Epoch 6/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.5971 - accuracy: 0.7600 - val_loss: 0.5811 - val_accuracy: 0.7567\n","Epoch 7/50\n","120/120 [==============================] - 13s 108ms/step - loss: 0.5352 - accuracy: 0.7733 - val_loss: 0.5444 - val_accuracy: 0.8033\n","Epoch 8/50\n","120/120 [==============================] - 12s 100ms/step - loss: 0.5070 - accuracy: 0.7992 - val_loss: 0.4861 - val_accuracy: 0.7833\n","Epoch 9/50\n","120/120 [==============================] - 13s 108ms/step - loss: 0.4572 - accuracy: 0.8050 - val_loss: 0.5532 - val_accuracy: 0.7867\n","Epoch 10/50\n","120/120 [==============================] - 13s 109ms/step - loss: 0.4035 - accuracy: 0.8192 - val_loss: 0.4837 - val_accuracy: 0.8100\n","Epoch 11/50\n","120/120 [==============================] - 13s 112ms/step - loss: 0.3980 - accuracy: 0.8392 - val_loss: 0.5245 - val_accuracy: 0.7800\n","Epoch 12/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.3365 - accuracy: 0.8567 - val_loss: 0.4760 - val_accuracy: 0.8100\n","Epoch 13/50\n","120/120 [==============================] - 14s 114ms/step - loss: 0.3397 - accuracy: 0.8533 - val_loss: 0.4918 - val_accuracy: 0.8367\n","Epoch 14/50\n","120/120 [==============================] - 13s 112ms/step - loss: 0.3660 - accuracy: 0.8408 - val_loss: 0.4491 - val_accuracy: 0.8433\n","Epoch 15/50\n","120/120 [==============================] - 13s 108ms/step - loss: 0.3434 - accuracy: 0.8567 - val_loss: 0.4070 - val_accuracy: 0.8733\n","Epoch 16/50\n","120/120 [==============================] - 20s 164ms/step - loss: 0.3223 - accuracy: 0.8667 - val_loss: 0.4184 - val_accuracy: 0.8433\n","Epoch 17/50\n","120/120 [==============================] - 14s 116ms/step - loss: 0.2699 - accuracy: 0.8817 - val_loss: 0.3915 - val_accuracy: 0.8633\n","Epoch 18/50\n","120/120 [==============================] - 14s 119ms/step - loss: 0.2607 - accuracy: 0.8825 - val_loss: 0.4412 - val_accuracy: 0.8567\n","Epoch 19/50\n","120/120 [==============================] - 14s 116ms/step - loss: 0.2882 - accuracy: 0.8742 - val_loss: 0.5514 - val_accuracy: 0.7867\n","Epoch 20/50\n","120/120 [==============================] - 13s 105ms/step - loss: 0.2847 - accuracy: 0.8842 - val_loss: 0.4092 - val_accuracy: 0.8467\n","Epoch 21/50\n","120/120 [==============================] - 13s 104ms/step - loss: 0.2541 - accuracy: 0.8808 - val_loss: 0.4064 - val_accuracy: 0.8367\n","Epoch 22/50\n","120/120 [==============================] - 14s 114ms/step - loss: 0.2105 - accuracy: 0.8983 - val_loss: 0.3838 - val_accuracy: 0.8733\n","Epoch 23/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.2124 - accuracy: 0.9042 - val_loss: 0.4298 - val_accuracy: 0.8633\n","Epoch 24/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.2431 - accuracy: 0.9000 - val_loss: 0.4223 - val_accuracy: 0.8633\n","Epoch 25/50\n","120/120 [==============================] - 15s 127ms/step - loss: 0.1876 - accuracy: 0.9008 - val_loss: 0.3884 - val_accuracy: 0.8967\n","Epoch 26/50\n","120/120 [==============================] - 16s 132ms/step - loss: 0.1833 - accuracy: 0.9133 - val_loss: 0.4470 - val_accuracy: 0.8800\n","Epoch 27/50\n","120/120 [==============================] - 15s 126ms/step - loss: 0.3915 - accuracy: 0.8475 - val_loss: 0.4023 - val_accuracy: 0.8567\n","Epoch 28/50\n","120/120 [==============================] - 16s 135ms/step - loss: 0.1942 - accuracy: 0.9125 - val_loss: 0.3855 - val_accuracy: 0.8833\n","Epoch 29/50\n","120/120 [==============================] - 15s 122ms/step - loss: 0.1731 - accuracy: 0.9283 - val_loss: 0.4037 - val_accuracy: 0.8767\n","Epoch 30/50\n","120/120 [==============================] - 14s 113ms/step - loss: 0.1719 - accuracy: 0.9158 - val_loss: 0.3698 - val_accuracy: 0.8800\n","Epoch 31/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.1848 - accuracy: 0.9208 - val_loss: 0.4746 - val_accuracy: 0.8567\n","Epoch 32/50\n","120/120 [==============================] - 13s 113ms/step - loss: 0.1749 - accuracy: 0.9117 - val_loss: 0.3436 - val_accuracy: 0.8800\n","Epoch 33/50\n","120/120 [==============================] - 13s 109ms/step - loss: 0.1916 - accuracy: 0.9100 - val_loss: 0.4124 - val_accuracy: 0.8600\n","Epoch 34/50\n","120/120 [==============================] - 14s 113ms/step - loss: 0.1791 - accuracy: 0.9175 - val_loss: 0.3961 - val_accuracy: 0.8733\n","Epoch 35/50\n","120/120 [==============================] - 13s 110ms/step - loss: 0.1814 - accuracy: 0.9150 - val_loss: 0.4076 - val_accuracy: 0.8767\n","Epoch 36/50\n","120/120 [==============================] - 15s 122ms/step - loss: 0.1396 - accuracy: 0.9325 - val_loss: 0.3788 - val_accuracy: 0.8867\n","Epoch 37/50\n","120/120 [==============================] - 13s 111ms/step - loss: 0.1675 - accuracy: 0.9242 - val_loss: 0.4464 - val_accuracy: 0.8667\n","Epoch 38/50\n","120/120 [==============================] - 14s 118ms/step - loss: 0.1441 - accuracy: 0.9283 - val_loss: 0.3544 - val_accuracy: 0.8900\n","Epoch 39/50\n","120/120 [==============================] - 13s 112ms/step - loss: 0.2223 - accuracy: 0.9075 - val_loss: 0.3770 - val_accuracy: 0.8700\n","Epoch 40/50\n","120/120 [==============================] - 13s 111ms/step - loss: 0.1769 - accuracy: 0.9067 - val_loss: 0.3521 - val_accuracy: 0.8733\n","Epoch 41/50\n","120/120 [==============================] - 14s 118ms/step - loss: 0.1603 - accuracy: 0.9308 - val_loss: 0.3493 - val_accuracy: 0.8800\n","Epoch 42/50\n","120/120 [==============================] - 13s 112ms/step - loss: 0.1376 - accuracy: 0.9350 - val_loss: 0.3569 - val_accuracy: 0.8767\n","Epoch 43/50\n","120/120 [==============================] - 14s 115ms/step - loss: 0.1343 - accuracy: 0.9292 - val_loss: 0.3801 - val_accuracy: 0.8933\n","Epoch 44/50\n","120/120 [==============================] - 14s 118ms/step - loss: 0.1450 - accuracy: 0.9217 - val_loss: 0.4960 - val_accuracy: 0.8733\n","Epoch 45/50\n","120/120 [==============================] - 13s 110ms/step - loss: 0.1780 - accuracy: 0.9117 - val_loss: 0.3802 - val_accuracy: 0.8767\n","Epoch 46/50\n","120/120 [==============================] - 13s 110ms/step - loss: 0.1272 - accuracy: 0.9308 - val_loss: 0.3798 - val_accuracy: 0.8767\n","Epoch 47/50\n","120/120 [==============================] - 12s 104ms/step - loss: 0.1324 - accuracy: 0.9267 - val_loss: 0.3926 - val_accuracy: 0.8800\n","Epoch 48/50\n","120/120 [==============================] - 14s 118ms/step - loss: 0.1415 - accuracy: 0.9325 - val_loss: 0.3866 - val_accuracy: 0.8800\n","Epoch 49/50\n","120/120 [==============================] - 14s 118ms/step - loss: 0.1539 - accuracy: 0.9292 - val_loss: 0.5773 - val_accuracy: 0.8267\n","Epoch 50/50\n","120/120 [==============================] - 14s 116ms/step - loss: 0.1630 - accuracy: 0.9200 - val_loss: 0.3390 - val_accuracy: 0.8900\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["loss, accuracy = Malware_model.evaluate(xtest, ytest, verbose=0)\n","print(\"Accuracy score : \",accuracy*100,\"%\")\n","print(\"Loss score : \",loss)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JrpmdkT4OFTj","executionInfo":{"status":"ok","timestamp":1680749812513,"user_tz":-330,"elapsed":1210,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"7fc0816f-a5af-4bda-e3bb-ed4c2772bbf0"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score :  88.99999856948853 %\n","Loss score :  0.33904916048049927\n"]}]},{"cell_type":"code","source":["y_pred = Malware_model.predict(xtest)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749812514,"user_tz":-330,"elapsed":23,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"99e6bf48-1c03-4d5a-acaf-afcd3bdee596","id":"EJ3UMGAGZmTw"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 [==============================] - 1s 55ms/step\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report\n","\n","true_y = tensorflow.math.argmax(ytest, axis = 1)\n","pred_y = tensorflow.math.argmax(y_pred, axis = 1)\n","\n","print(true_y.shape)\n","print(pred_y.shape)\n","\n","model_report = classification_report(true_y, pred_y, target_names = families)\n","print(\"Classification report: \\n\",model_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749812515,"user_tz":-330,"elapsed":18,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"c87726bd-8666-4b4f-a21c-5d1d56862623","id":"gVbz3ZcHZmTx"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(300,)\n","(300,)\n","Classification report: \n","                 precision    recall  f1-score   support\n","\n"," Swizzor.gen!E       1.00      1.00      1.00        11\n","       Yuner.A       1.00      1.00      1.00         8\n","      Rbot!gen       0.91      1.00      0.95        20\n"," Obfuscator.AD       1.00      0.92      0.96        12\n","         VB.AT       1.00      1.00      1.00        13\n"," Swizzor.gen!I       0.00      0.00      0.00        10\n","    Skintrim.N       0.64      0.69      0.67        13\n","    Wintrim.BX       0.64      0.78      0.70         9\n","     Lolyda.AT       1.00      1.00      1.00         6\n","      Fakerean       1.00      1.00      1.00        12\n"," Instantaccess       1.00      0.91      0.95        11\n","     Dontovo.A       1.00      1.00      1.00        19\n","    Lolyda.AA3       0.92      1.00      0.96        12\n","   Malex.gen!J       1.00      0.94      0.97        17\n","    Lolyda.AA1       0.89      1.00      0.94         8\n","    Lolyda.AA2       1.00      1.00      1.00        14\n","       C2LOP.P       1.00      0.82      0.90        11\n","Dialplatform.B       1.00      1.00      1.00         9\n","     Autorun.K       0.90      0.90      0.90        10\n","     Agent.FYI       1.00      1.00      1.00        15\n"," Alueron.gen!J       0.45      0.62      0.53         8\n","   C2LOP.gen!g       0.75      0.43      0.55        14\n","     Adialer.C       1.00      1.00      1.00         9\n","     Allaple.A       1.00      1.00      1.00        16\n","     Allaple.L       0.57      1.00      0.72        13\n","\n","      accuracy                           0.89       300\n","     macro avg       0.87      0.88      0.87       300\n","  weighted avg       0.88      0.89      0.88       300\n","\n"]}]},{"cell_type":"code","source":["matrix = confusion_matrix(true_y,pred_y)\n","print(matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749812516,"user_tz":-330,"elapsed":16,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"0b14464d-00ca-496e-fa0d-953ab65604bb","id":"PNQW2oj3ZmTx"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  8  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  1 11  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0 13  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  10]\n"," [ 0  0  0  0  0  0  9  1  0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0\n","   0]\n"," [ 0  0  0  0  0  0  2  7  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0 12  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  1  0  0  0  0  0  0  0 10  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0 19  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0 12  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  1 16  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  8  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 14  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  9  0  1  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  9  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  9  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 15  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  1  2  0  0  0  0  0  0  0  0  0  0  0  0  5  0  0  0\n","   0]\n"," [ 0  0  0  0  0  1  2  0  0  0  0  0  0  0  0  0  0  0  0  0  5  6  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  9  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  13]]\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","print(\"AUC ROC score: \",roc_auc_score(ytest, y_pred, multi_class='ovr'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749812517,"user_tz":-330,"elapsed":14,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"55ecdd1e-0329-419e-8ed3-b306ec45bf7a","id":"DjCC5HM_ZmTy"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC ROC score:  0.9947612012856255\n"]}]},{"cell_type":"markdown","source":["# ***Testing with validation data***"],"metadata":{"id":"4vU0TQNFXdfE"}},{"cell_type":"code","source":["val_y = Malware_model.predict(val_images)"],"metadata":{"id":"x2mI20yrXbTN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749813616,"user_tz":-330,"elapsed":1109,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"595cfa97-7786-4c17-8e61-c327f6f491d7"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["16/16 [==============================] - 1s 57ms/step\n"]}]},{"cell_type":"code","source":["val_family_names = tensorflow.math.argmax(val_family_names, axis = 1)\n","val_y = tensorflow.math.argmax(val_y, axis = 1)\n","\n","print(val_family_names.shape)\n","print(val_y.shape)\n","\n","model_report = classification_report(val_family_names, val_y, target_names = families)\n","print(\"Classification report: \\n\",model_report)"],"metadata":{"id":"7tsVCig1Xv7R","executionInfo":{"status":"ok","timestamp":1680749813617,"user_tz":-330,"elapsed":28,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bdc2925b-a219-4623-a8d8-05ae3cf324a6"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["(500,)\n","(500,)\n","Classification report: \n","                 precision    recall  f1-score   support\n","\n"," Swizzor.gen!E       1.00      1.00      1.00        20\n","       Yuner.A       1.00      0.85      0.92        20\n","      Rbot!gen       0.95      0.95      0.95        20\n"," Obfuscator.AD       1.00      0.95      0.97        20\n","         VB.AT       1.00      1.00      1.00        20\n"," Swizzor.gen!I       0.00      0.00      0.00        20\n","    Skintrim.N       0.81      0.85      0.83        20\n","    Wintrim.BX       0.78      0.70      0.74        20\n","     Lolyda.AT       1.00      1.00      1.00        20\n","      Fakerean       1.00      1.00      1.00        20\n"," Instantaccess       0.95      1.00      0.98        20\n","     Dontovo.A       1.00      1.00      1.00        20\n","    Lolyda.AA3       1.00      0.95      0.97        20\n","   Malex.gen!J       0.95      1.00      0.98        20\n","    Lolyda.AA1       0.87      1.00      0.93        20\n","    Lolyda.AA2       1.00      1.00      1.00        20\n","       C2LOP.P       1.00      1.00      1.00        20\n","Dialplatform.B       0.91      1.00      0.95        20\n","     Autorun.K       1.00      0.95      0.97        20\n","     Agent.FYI       1.00      0.90      0.95        20\n"," Alueron.gen!J       0.59      0.85      0.69        20\n","   C2LOP.gen!g       0.83      0.50      0.62        20\n","     Adialer.C       1.00      1.00      1.00        20\n","     Allaple.A       0.95      1.00      0.98        20\n","     Allaple.L       0.50      1.00      0.67        20\n","\n","      accuracy                           0.90       500\n","     macro avg       0.88      0.90      0.88       500\n","  weighted avg       0.88      0.90      0.88       500\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["matrix = confusion_matrix(val_family_names,val_y)\n","print(matrix)"],"metadata":{"id":"7HGDm_YpXzwC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680749813618,"user_tz":-330,"elapsed":17,"user":{"displayName":"MANDAVA DEEPAK 20BAI1162","userId":"02368324067293942819"}},"outputId":"7041b15a-9c24-4610-e889-dd94aac8a6f0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0 17  0  0  0  0  0  0  0  0  0  0  0  0  3  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0 19  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  1 19  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  20]\n"," [ 0  0  0  0  0  0 17  2  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  3 14  0  0  0  0  0  0  0  0  0  0  0  0  2  1  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0 19  1  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 20  0  0  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 19  0  0  0  0  1\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  2  0 18  0  0  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  0  0 17  1  0  0\n","   0]\n"," [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  9 10  0  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 20  0\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 20\n","   0]\n"," [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  20]]\n"]}]}]}